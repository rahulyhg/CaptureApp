// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using CaptureApp.Data;
using CaptureApp.API;
using CoreGraphics;
using System.Collections.Generic;
using CoreAnimation;

namespace CaptureApp.iOS
{
	public partial class EmojiViewController : UIViewController
	{
		static NSString animalCellId = new NSString ("AnimalCell");

		private List<String> emojis;
		private Moment currentMoment;

		public event Action<Moment> Finished;

		public static EmojiViewController Instance;

		public EmojiViewController (IntPtr handle) : base (handle)
		{
			this.Title = "Take Emoji";
			this.emojis = new List<string> ();
			this.emojis.AddRange (EmojiFactory.GetEmojieCodes ());
			Instance = this;
		}

		public override void ViewDidAppear (bool animated)
		{
			base.ViewDidAppear (animated);
		}

		public void Config(Moment moment){
			this.currentMoment = moment;
			//this.CommentTextField.Text = moment.Comment;
			//this.CreateButton.SetTitle ("Change", UIControlState.Normal);
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			CollectionView.RegisterClassForCell (typeof(EmojiCell), animalCellId);
			EmojiSource source = new EmojiSource (this.emojis);
			this.CollectionView.CollectionViewLayout = new LineLayout (new CGSize(this.CollectionView.Bounds.Width,this.CollectionView.Bounds.Width),true);
			this.CollectionView.BackgroundColor = UIColor.White;
			CollectionView.Source = source;
			this.CreateButton.Layer.CornerRadius = 3f;
			this.CommentTextField.Started += (sender, e) => {
				this.ScrollView.SetContentOffset(new CGPoint(0,100),true);
			};
			this.CommentTextField.Ended += (sender, e) => {
				this.ScrollView.SetContentOffset(new CGPoint(0,0),true);
			};

			this.CommentTextField.ReturnKeyType = UIReturnKeyType.Done;
			this.CommentTextField.ShouldReturn += (textField) => {
				this.CommentTextField.ResignFirstResponder();
				this.ScrollView.SetContentOffset(new CGPoint(0,0),true);
				return true;
			};
			this.CreateButton.TouchDown += (sender, e) => {
				String text = ((EmojiCell)this.CollectionView.VisibleCells[0]).Text;
				Moment moment = new Moment(){Title ="Emoji",Comment="Not Edited"};
				moment.Emojis.Add(text);
				AppDelegate.MomentsManager.PublishMoment(moment);
				this.NavigationController.PopViewController(true);
				if(this.Finished != null)
					this.Finished(moment);
			};
		}


		private class EmojiSource:UICollectionViewSource{

			private List<String> emojies;

			public EmojiSource(List<String> emojies){
				this.emojies = emojies;
			}
			
			public override UICollectionViewCell GetCell (UICollectionView collectionView, Foundation.NSIndexPath indexPath)
			{
				var emojiCell = (EmojiCell)collectionView.DequeueReusableCell (animalCellId, indexPath);
				emojiCell.Config (this.emojies [indexPath.Row],100);
				return emojiCell;
			}

			public override nint NumberOfSections (UICollectionView collectionView)
			{
				return 1;
			}

			public override nint GetItemsCount (UICollectionView collectionView, nint section)
			{
				return this.emojies.Count;
			}
		}










	}
}
